import React, { useState } from 'react';
import './ExportResults.css';

const ExportResults = ({ result }) => {
  const [exportFormat, setExportFormat] = useState('text');
  const [exported, setExported] = useState(false);

  const formatResultsAsText = () => {
    const { compatibilityScore, analysis, processedAt, jobTitle, companyName } = result;
    
    return `RESUME ANALYSIS RESULTS
${jobTitle ? `Position: ${jobTitle}` : ''}
${companyName ? `Company: ${companyName}` : ''}
Generated: ${new Date(processedAt).toLocaleString()}

COMPATIBILITY SCORE: ${compatibilityScore}%

STRENGTHS:
${analysis.strengths?.map((strength, i) => `${i + 1}. ${strength}`).join('\n') || 'None identified'}

AREAS TO IMPROVE:
${analysis.gaps?.map((gap, i) => `${i + 1}. ${gap}`).join('\n') || 'None identified'}

SUGGESTED IMPROVEMENTS:
${analysis.suggestions?.map((suggestion, index) => 
  `${index + 1}. ${suggestion.section}
   Current: "${suggestion.current}"
   Suggested: "${suggestion.suggested}"`
).join('\n\n') || 'None provided'}

---
Generated by ResumeMatch - AI-Powered Resume Analysis
Powered by OpenAI GPT-3.5
`;
  };

  const formatResultsAsJSON = () => {
    return JSON.stringify({
      ...result,
      exportedAt: new Date().toISOString(),
      tool: 'ResumeMatch',
      version: '1.0.0'
    }, null, 2);
  };

  const formatResultsAsMarkdown = () => {
    const { compatibilityScore, analysis, processedAt, jobTitle, companyName } = result;
    
    return `# Resume Analysis Results

${jobTitle ? `**Position:** ${jobTitle}` : ''}
${companyName ? `**Company:** ${companyName}` : ''}
**Generated:** ${new Date(processedAt).toLocaleString()}

## üéØ Compatibility Score: ${compatibilityScore}%

## ‚úÖ Strengths
${analysis.strengths?.map(strength => `- ${strength}`).join('\n') || 'None identified'}

## ‚ö†Ô∏è Areas to Improve
${analysis.gaps?.map(gap => `- ${gap}`).join('\n') || 'None identified'}

## üí° AI Suggestions

${analysis.suggestions?.map((suggestion, index) => 
  `### ${index + 1}. ${suggestion.section}

**Current:**
\`\`\`
${suggestion.current}
\`\`\`

**Suggested:**
\`\`\`
${suggestion.suggested}
\`\`\`
`
).join('\n') || 'None provided'}

---
*Generated by ResumeMatch - AI-Powered Resume Analysis*  
*Powered by OpenAI GPT-3.5*
`;
  };

  const getFormattedResults = () => {
    switch (exportFormat) {
      case 'json':
        return formatResultsAsJSON();
      case 'markdown':
        return formatResultsAsMarkdown();
      default:
        return formatResultsAsText();
    }
  };

  const downloadResults = () => {
    const content = getFormattedResults();
    const blob = new Blob([content], { type: 'text/plain;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    
    const timestamp = new Date().toISOString().slice(0, 10);
    const jobTitle = result.jobTitle ? `-${result.jobTitle.replace(/[^a-zA-Z0-9]/g, '')}` : '';
    const extension = exportFormat === 'json' ? 'json' : exportFormat === 'markdown' ? 'md' : 'txt';
    
    const link = document.createElement('a');
    link.href = url;
    link.download = `resume-analysis${jobTitle}-${timestamp}.${extension}`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    setExported(true);
    setTimeout(() => setExported(false), 3000);
  };

  const copyToClipboard = async () => {
    try {
      const content = getFormattedResults();
      await navigator.clipboard.writeText(content);
      setExported(true);
      setTimeout(() => setExported(false), 3000);
    } catch (err) {
      console.error('Failed to copy to clipboard:', err);
    }
  };

  const printResults = () => {
    const content = getFormattedResults();
    const printWindow = window.open('', '', 'height=600,width=800');
    printWindow.document.write(`
      <html>
        <head>
          <title>Resume Analysis Results</title>
          <style>
            body { 
              font-family: Arial, sans-serif; 
              margin: 20px; 
              line-height: 1.6;
            }
            pre { 
              white-space: pre-wrap; 
              font-family: inherit; 
              font-size: 14px;
            }
            h1 { color: #333; }
            .header { 
              border-bottom: 2px solid #3b82f6; 
              padding-bottom: 10px; 
              margin-bottom: 20px; 
            }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>ResumeMatch Analysis Results</h1>
          </div>
          <pre>${content}</pre>
        </body>
      </html>
    `);
    printWindow.document.close();
    printWindow.print();
  };

  return (
    <div className="export-results">
      <div className="export-header">
        <h3>
          <span className="header-icon">üìã</span>
          Export Your Results
        </h3>
        <p>Save, share, or print your analysis results in your preferred format.</p>
      </div>

      <div className="export-options">
        <div className="format-selector">
          <label className="format-label">Choose Export Format:</label>
          <div className="format-buttons">
            <button
              className={`format-btn ${exportFormat === 'text' ? 'active' : ''}`}
              onClick={() => setExportFormat('text')}
            >
              <span className="format-icon">üìÑ</span>
              <span className="format-name">Text</span>
              <span className="format-desc">Simple, readable format</span>
            </button>
            <button
              className={`format-btn ${exportFormat === 'markdown' ? 'active' : ''}`}
              onClick={() => setExportFormat('markdown')}
            >
              <span className="format-icon">üìù</span>
              <span className="format-name">Markdown</span>
              <span className="format-desc">Formatted for GitHub/docs</span>
            </button>
            <button
              className={`format-btn ${exportFormat === 'json' ? 'active' : ''}`}
              onClick={() => setExportFormat('json')}
            >
              <span className="format-icon">üîß</span>
              <span className="format-name">JSON</span>
              <span className="format-desc">Structured data format</span>
            </button>
          </div>
        </div>

        <div className="export-actions">
          <button 
            className="action-btn download"
            onClick={downloadResults}
          >
            <span className="btn-icon">‚¨áÔ∏è</span>
            Download File
          </button>
          
          <button 
            className="action-btn copy"
            onClick={copyToClipboard}
          >
            <span className="btn-icon">üìã</span>
            Copy to Clipboard
          </button>
          
          <button 
            className="action-btn print"
            onClick={printResults}
          >
            <span className="btn-icon">üñ®Ô∏è</span>
            Print Results
          </button>
        </div>

        {exported && (
          <div className="export-success">
            <span className="success-icon">‚úÖ</span>
            <span className="success-text">Export completed successfully!</span>
          </div>
        )}
      </div>

      <div className="preview-section">
        <h4>
          <span className="preview-icon">üëÄ</span>
          Preview:
        </h4>
        <div className="preview-content">
          <pre className="preview-text">
            {getFormattedResults().substring(0, 800)}
            {getFormattedResults().length > 800 ? '\n\n... (truncated)' : ''}
          </pre>
        </div>
      </div>

      <div className="export-info">
        <h4>
          <span className="info-icon">‚ÑπÔ∏è</span>
          Export Formats:
        </h4>
        <div className="format-info-grid">
          <div className="format-info">
            <strong>Text (.txt):</strong> Clean, readable format perfect for emails and notes
          </div>
          <div className="format-info">
            <strong>Markdown (.md):</strong> Formatted text ideal for GitHub, documentation, and blogs
          </div>
          <div className="format-info">
            <strong>JSON (.json):</strong> Structured data format for developers and integrations
          </div>
        </div>
      </div>
    </div>
  );
};

export default ExportResults;